#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)
source ./bin/lib.sh

echo ''

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]; then
    info 'Setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
        skip=true;
      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "Removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "Moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "Skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then  # "false" or empty
    ln -s "$1" "$2"
    success "Linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'Installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

create_my_std_dirs() {
  cd ${HOME}
  local dirs="bin tmp/trash Development"

  if [ -d ~/Downloads ]; then
    if [ ! -L ~/tmp ]; then
      msg='Linked ~/Downloads to ~/tmp'
      ln -s Downloads tmp && success $msg || fail $msg
    else
      success "Skipped ~/tmp already a symlink"
    fi
  else
    dirs="tmp $dirs"
  fi

  for dir in $dirs; do
    if [ ! -d ~/$dir ]; then
      msg="Created ~/$dir"
      mkdir ~/$dir && success $msg || fail $msg
    else
      success "Skipped ~/$dir already exists"
    fi
  done
}

setup_gitconfig
install_dotfiles
[ "$(uname -s)" = "Darwin" ] && create_my_std_dirs

info "Installing dependencies..."
if source $DOTFILES_ROOT/bin/dot | tee /tmp/dotfiles-dot 2>&1; then
  success "Dependencies installed"
else
  fail "Error installing dependencies"
fi

echo ''
success '  All installed!'
